---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import Episode from '../layouts/Episode.astro';
import sortByDate from "../utils/sortByDate.js";
import slugEp from "../utils/slugEp.js";
import similarEp from "../utils/similarEp.js";

export async function getStaticPaths() {

	const episodes = await getCollection('episodes',({ data }) => {return data.published === true;});
	const numberOfEpisodes = episodes.length-1;
	return episodes.sort(sortByDate).reverse().map((episode,i) => {

		let now = new Date(Date.now());
		let nextEpisode = null;

		if (i !== numberOfEpisodes && episodes[i + 1]?.data?.pubDate < now) {
			nextEpisode = episodes[i + 1];
		}
		
		const prevEpisode = i === 0 ? null : episodes[i-1];

		return {
			params: {
				slug: slugEp(episode) 
			},
			props: {
				episode,
				nextEpisode,
				prevEpisode,
				similarEpisodes: similarEp(episode,episodes)
			}
		}
	});
}

interface Props {episode: any, prevEpisode?: any, nextEpisode?: any, similarEpisodes: any}
const { episode, prevEpisode, nextEpisode, similarEpisodes } = Astro.props;

// console.log("prev:"+slugEp(prevEpisode)+" - current:"+slugEp(episode)+" - nextEp:"+slugEp(nextEpisode));

const { Content } = await render(episode);

---
<Episode { ...episode.data } prevEpisode={ prevEpisode ? `/${slugEp(prevEpisode)}` : null } nextEpisode={ nextEpisode ? `/${slugEp(nextEpisode)}` : null } similarEpisodes = { similarEpisodes }>
	<Content />
</Episode>
